{"ast":null,"code":"import _objectSpread from \"/home/pedro/\\xC1rea de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/pedro/\\xC1rea de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pedro/\\xC1rea de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/src/containers/GitContainer.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getAllRepository } from '../domains/git/GitService';\nimport Spinner from '../components/UI/Spinner';\nimport GitRepositoryGrid from '../components/git/repositories/GridComponent';\nimport ErrorPage from '../components/UI/ErrorPage';\nexport default function GitContainer() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        gitList = _useState2[0],\n        setGitList = _useState2[1];\n\n  const _useState3 = useState({\n    value: true\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    value: null\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const setErrorState = newValue => {\n    setError(_objectSpread({}, error, {\n      value: newValue\n    }));\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const repos = await getAllRepository();\n        setGitList(repos.data);\n      } catch (e) {\n        setErrorState(e);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [gitList]);\n\n  if (gitList.length > 0) {\n    return React.createElement(GitRepositoryGrid, {\n      data: gitList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Spinner, {\n      loading: isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n  if (error !== null) {\n    return React.createElement(ErrorPage, {\n      error: error.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"\\\"No data found\\\"\");\n}","map":{"version":3,"sources":["/home/pedro/Área de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/src/containers/GitContainer.js"],"names":["React","useEffect","useState","getAllRepository","Spinner","GitRepositoryGrid","ErrorPage","GitContainer","gitList","setGitList","value","isLoading","setLoading","error","setError","setErrorState","newValue","fetchData","repos","data","e","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,SAAQC,gBAAR,QAA+B,2BAA/B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,iBAAP,MAA8B,8CAA9B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAGA,eAAe,SAASC,YAAT,GAAyB;AAAA,oBAGRL,QAAQ,CAAC,EAAD,CAHA;AAAA;AAAA,QAG/BM,OAH+B;AAAA,QAGtBC,UAHsB;;AAAA,qBAKNP,QAAQ,CAAC;AACvCQ,IAAAA,KAAK,EAAE;AADgC,GAAD,CALF;AAAA;AAAA,QAK/BC,SAL+B;AAAA,QAKpBC,UALoB;;AAAA,qBASZV,QAAQ,CAAC;AACjCQ,IAAAA,KAAK,EAAE;AAD0B,GAAD,CATI;AAAA;AAAA,QAS/BG,KAT+B;AAAA,QASxBC,QATwB;;AAYtC,QAAMC,aAAa,GAAIC,QAAD,IAAc;AAClCF,IAAAA,QAAQ,mBAAMD,KAAN;AAAaH,MAAAA,KAAK,EAAEM;AAApB,OAAR;AACD,GAFD;;AAIAf,EAAAA,SAAS,CAAC,MAAM;AAEd,mBAAegB,SAAf,GAA0B;AAExB,UAAG;AACD,cAAMC,KAAK,GAAG,MAAMf,gBAAgB,EAApC;AACAM,QAAAA,UAAU,CAACS,KAAK,CAACC,IAAP,CAAV;AACD,OAHD,CAIA,OAAMC,CAAN,EAAQ;AACNL,QAAAA,aAAa,CAACK,CAAD,CAAb;AACD,OAND,SAOO;AACLR,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AAEF;;AAEDK,IAAAA,SAAS;AAEV,GAnBQ,EAmBP,CAACT,OAAD,CAnBO,CAAT;;AAqBA,MAAGA,OAAO,CAACa,MAAR,GAAiB,CAApB,EAAsB;AACpB,WAAQ,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAEb,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD;;AAED,MAAGG,SAAH,EAAa;AACX,WAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAGE,KAAK,KAAK,IAAb,EAAkB;AACd,WAAQ,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,KAAK,CAACH,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AAED","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport {getAllRepository} from '../domains/git/GitService';\nimport Spinner from '../components/UI/Spinner';\nimport GitRepositoryGrid from '../components/git/repositories/GridComponent';\nimport ErrorPage from '../components/UI/ErrorPage';\n\n\nexport default function GitContainer () {\n\n\n  const [gitList, setGitList] = useState([]);\n  \n  const [isLoading, setLoading] = useState({\n    value: true,\n  });\n  \n  const [error, setError] = useState({\n    value: null,\n  });\n  const setErrorState = (newValue) => {    \n    setError({ ...error, value: newValue })\n  }\n\n  useEffect(() => {  \n\n    async function fetchData(){\n      \n      try{\n        const repos = await getAllRepository();  \n        setGitList(repos.data);        \n      }\n      catch(e){                \n        setErrorState(e);\n      }\n      finally{        \n        setLoading(false);\n      }\n      \n    }\n\n    fetchData();\n\n  },[gitList])  \n\n  if(gitList.length > 0){\n    return (<GitRepositoryGrid data={gitList}/>);\n  }\n\n  if(isLoading){        \n    return(<Spinner loading={isLoading} />);  \n  }  \n\n  if(error !== null){      \n      return (<ErrorPage error={error.value} />);\n  }\n\n  return(<div>\"No data found\"</div>);\n\n}"]},"metadata":{},"sourceType":"module"}