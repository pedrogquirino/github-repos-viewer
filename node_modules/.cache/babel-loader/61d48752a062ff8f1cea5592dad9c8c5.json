{"ast":null,"code":"import _objectSpread from \"/home/pedro/\\xC1rea de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/pedro/\\xC1rea de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pedro/\\xC1rea de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/src/GitRepositories/Container.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getAllRepository } from './Service';\nimport Spinner from '../shared/Spinner';\nimport GitRepositoryGrid from './Component';\nimport ErrorPage from '../shared/ErrorPage';\nexport default (() => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        gitList = _useState2[0],\n        setGitList = _useState2[1];\n\n  const _useState3 = useState({\n    value: true\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState({\n    value: null\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const setErrorState = newValue => {\n    setError(_objectSpread({}, error, {\n      value: newValue\n    }));\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const repos = await getAllRepository();\n        setGitList(repos.data);\n      } catch (e) {\n        setErrorState(e);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [setErrorState]);\n\n  if (gitList.length > 0) {\n    return React.createElement(GitRepositoryGrid, {\n      data: gitList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Spinner, {\n      loading: isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n  if (error !== null) {\n    return React.createElement(ErrorPage, {\n      error: error.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"\\\"No data found\\\"\");\n});","map":{"version":3,"sources":["/home/pedro/Área de Trabalho/projetos/github.com/pedrogquirino/github-repos-viewer/src/GitRepositories/Container.js"],"names":["React","useEffect","useState","getAllRepository","Spinner","GitRepositoryGrid","ErrorPage","gitList","setGitList","value","isLoading","setLoading","error","setError","setErrorState","newValue","fetchData","repos","data","e","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,iBAAP,MAA8B,aAA9B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAGA,gBAAe,MAAM;AAAA,oBAGWJ,QAAQ,CAAC,EAAD,CAHnB;AAAA;AAAA,QAGZK,OAHY;AAAA,QAGHC,UAHG;;AAAA,qBAKaN,QAAQ,CAAC;AACvCO,IAAAA,KAAK,EAAE;AADgC,GAAD,CALrB;AAAA;AAAA,QAKZC,SALY;AAAA,QAKDC,UALC;;AAAA,qBASOT,QAAQ,CAAC;AACjCO,IAAAA,KAAK,EAAE;AAD0B,GAAD,CATf;AAAA;AAAA,QASZG,KATY;AAAA,QASLC,QATK;;AAYnB,QAAMC,aAAa,GAAIC,QAAD,IAAc;AAClCF,IAAAA,QAAQ,mBAAMD,KAAN;AAAaH,MAAAA,KAAK,EAAEM;AAApB,OAAR;AACD,GAFD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AAEd,mBAAee,SAAf,GAA0B;AAExB,UAAG;AACD,cAAMC,KAAK,GAAG,MAAMd,gBAAgB,EAApC;AACAK,QAAAA,UAAU,CAACS,KAAK,CAACC,IAAP,CAAV;AACD,OAHD,CAIA,OAAMC,CAAN,EAAQ;AACNL,QAAAA,aAAa,CAACK,CAAD,CAAb;AACD,OAND,SAOO;AACLR,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AAEF;;AAEDK,IAAAA,SAAS;AAEV,GAnBQ,EAmBP,CAACF,aAAD,CAnBO,CAAT;;AAqBA,MAAGP,OAAO,CAACa,MAAR,GAAiB,CAApB,EAAsB;AACpB,WAAQ,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAEb,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD;;AAED,MAAGG,SAAH,EAAa;AACX,WAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAGE,KAAK,KAAK,IAAb,EAAkB;AACd,WAAO,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,KAAK,CAACH,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AAED,CAnDD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getAllRepository } from './Service';\nimport Spinner from '../shared/Spinner';\nimport GitRepositoryGrid from './Component';\nimport ErrorPage from '../shared/ErrorPage';\n\n\nexport default () => {\n\n\n  const [gitList, setGitList] = useState([]);\n  \n  const [isLoading, setLoading] = useState({\n    value: true,\n  });\n  \n  const [error, setError] = useState({\n    value: null,\n  });\n  const setErrorState = (newValue) => {    \n    setError({ ...error, value: newValue })\n  }\n\n  useEffect(() => {  \n\n    async function fetchData(){\n      \n      try{\n        const repos = await getAllRepository();  \n        setGitList(repos.data);        \n      }\n      catch(e){                \n        setErrorState(e);\n      }\n      finally{        \n        setLoading(false);\n      }\n      \n    }\n\n    fetchData();\n\n  },[setErrorState])  \n\n  if(gitList.length > 0){\n    return (<GitRepositoryGrid data={gitList}/>);\n  }\n\n  if(isLoading){        \n    return <Spinner loading={isLoading} />;  \n  }  \n\n  if(error !== null){      \n      return <ErrorPage error={error.value} />;\n  }\n\n  return <div>\"No data found\"</div>;\n\n}"]},"metadata":{},"sourceType":"module"}